// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  fullname String 
  email String @unique()
  password String
  imageCover String? @default("default-user-image.webp")
  posts Post[]
  comments Comment[]
  role Role @default(User)
  favoritePosts Favourite[]
  likes Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Post{
  id String @id @default(uuid())
  title String @unique()
  content String 
  imageCover String
  images String[]
  user User @relation(fields: [userId] , references: [id],onDelete: Cascade)
  userId String
  categories Category[]
  comments Comment[]
  favourite Favourite[] 
  likes Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
model Favourite{
  // id String @id @default(uuid())
  user User @relation(fields : [userId] , references:[id])
  userId String
  post Post @relation(fields : [postId] , references:[id])
  postId String
  createdAt DateTime @default(now())
  @@id([userId,postId])
}
model Category{
  id String @id @default(uuid())
  name String @unique()
  posts Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
model Comment{
  id String @id @default(uuid())
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  // relations
  users User @relation(fields: [userId] , references: [id])
  userId String
  posts Post @relation(fields: [postId] , references: [id])
  postId String
  parent Comment? @relation("nestedComment" , fields:[parentId] , references: [id])
  parentId String?
  child Comment[] @relation("nestedComment")
}
model Like{
 user User @relation(fields:[userId] , references: [id])
 userId String
 post Post @relation(fields:[postId] , references: [id])
 postId String
 @@id([userId , postId])
}
enum Role{
  User
  Admin
  Owner
}
